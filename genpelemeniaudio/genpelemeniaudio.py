import json
import time
import base64
import logging
import os
import speech_recognition as sr
import librosa
import soundfile as sf
from io import BytesIO
from PIL import Image
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

VOICE_MESSAGE_DIR = "voice"


class FusionBrainAPI:
    def __init__(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

        self.STYLES = {
            "1": "üì∏ –§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "2": "üé® –ê–Ω–∏–º–µ",
            "3": "üñºÔ∏è –ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å",
            "4": "üåä –ê–∫–≤–∞—Ä–µ–ª—å",
            "5": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
            "6": "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
            "7": "‚ö´ –ú–∏–Ω–∏–º–∞–ª–∏–∑–º",
            "8": "üåÖ –ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º",
            "9": "‚úèÔ∏è –≠—Å–∫–∏–∑",
            "10": "üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º",
            "0": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è"
        }

        self.STYLE_PROMPTS = {
            "1": "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
            "2": "–≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ, —è–ø–æ–Ω—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞",
            "3": "–º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –º–∞–∑–∫–∏ –∫–∏—Å—Ç–∏",
            "4": "–∞–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫, –≤–æ–¥—è–Ω—ã–µ –∫—Ä–∞—Å–∫–∏, –ª–µ–≥–∫–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è",
            "5": "–∫–∏–±–µ—Ä–ø–∞–Ω–∫, –Ω–µ–æ–Ω, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ",
            "6": "—Ñ—ç–Ω—Ç–µ–∑–∏, –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –º–∞–≥–∏—è, —ç–ø–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å",
            "7": "–º–∏–Ω–∏–º–∞–ª–∏–∑–º, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã, —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏, –ª–∞–∫–æ–Ω–∏—á–Ω–æ",
            "8": "–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º, —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –º—è–≥–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã",
            "9": "—ç—Å–∫–∏–∑, –Ω–∞–±—Ä–æ—Å–æ–∫ –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º, —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ä–∏—Å—É–Ω–æ–∫",
            "10": "—Å—é—Ä—Ä–µ–∞–ª–∏–∑–º, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ, –Ω–µ—Ä–µ–∞–ª—å–Ω–æ, —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–µ",
            "0": ""
        }

    def get_pipeline(self):
        response = requests.get(self.URL + 'key/api/v1/pipelines', headers=self.AUTH_HEADERS)
        data = response.json()
        return data[0]['id']

    def generate(self, prompt, pipeline_id, images=1, width=1024, height=1024, style="0"):
        style_prompt = self.STYLE_PROMPTS.get(style, "")
        full_prompt = f"{prompt}, {style_prompt}" if style_prompt else prompt

        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": full_prompt
            }
        }

        data = {
            'pipeline_id': (None, pipeline_id),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/pipeline/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        return data['uuid']

    def check_generation(self, request_id, attempts=20, delay=10):
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/pipeline/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if data['status'] == 'DONE':
                return data['result']['files']
            elif data['status'] == 'FAIL':
                raise Exception("Generation failed")

            attempts -= 1
            time.sleep(delay)

        raise Exception("Timeout waiting for generation")

    def get_image_from_data(self, image_data):
        if isinstance(image_data, list):
            image_data = image_data[0]

        image_bytes = base64.b64decode(image_data)
        return Image.open(BytesIO(image_bytes))


def convert_ogg_to_wav(ogg_path, wav_path):
    try:
        audio, sr_rate = librosa.load(ogg_path, sr=16000)
        sf.write(wav_path, audio, sr_rate, format='WAV')
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False


def recognize_speech(audio_path):
    recognizer = sr.Recognizer()

    try:
        wav_path = audio_path.replace('.ogg', '.wav')

        if not convert_ogg_to_wav(audio_path, wav_path):
            return "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ"

        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")

        if os.path.exists(wav_path):
            os.unlink(wav_path)

        return text

    except sr.UnknownValueError:
        if os.path.exists(wav_path):
            os.unlink(wav_path)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except Exception as e:
        if os.path.exists(wav_path):
            os.unlink(wav_path)
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"


API_URL = 'https://api-key.fusionbrain.ai/'
API_KEY = '2687352F3C725474708679DCC389A5E9'
SECRET_KEY = 'DF1712A155C1F89445F5E423F46437A6'

api = FusionBrainAPI(API_URL, API_KEY, SECRET_KEY)
user_states = {}


def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")


def get_styles_keyboard():
    keyboard = [
        [KeyboardButton("üì∏ –§–æ—Ç–æ"), KeyboardButton("üé® –ê–Ω–∏–º–µ")],
        [KeyboardButton("üñºÔ∏è –ú–∞—Å–ª—è–Ω–∞—è"), KeyboardButton("üåä –ê–∫–≤–∞—Ä–µ–ª—å")],
        [KeyboardButton("ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫"), KeyboardButton("üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏")],
        [KeyboardButton("‚ö´ –ú–∏–Ω–∏–º–∞–ª–∏–∑–º"), KeyboardButton("üåÖ –ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º")],
        [KeyboardButton("‚úèÔ∏è –≠—Å–∫–∏–∑"), KeyboardButton("üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º")],
        [KeyboardButton("üö´ –ë–µ–∑ —Å—Ç–∏–ª—è"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å...")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {'step': 'waiting_prompt'}

    welcome_text = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!

–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–æ–Ω–∏.

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
4. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É)

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –ö–æ—Ç –Ω–∞ —Ñ–æ–Ω–µ –ª—É–Ω—ã
‚Ä¢ –ó–∞–∫–∞—Ç –≤ –ª–µ—Å—É
‚Ä¢ –ì–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ 

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! üñºÔ∏è
    """

    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑—Å–∫–∏ 
‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –ù–∞–∂–º–∏—Ç–µ "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
4. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É
    """
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_states:
        user_states[user_id] = {'step': 'waiting_prompt'}
    await update.message.reply_text("‚úÖ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                    reply_markup=get_main_keyboard())


async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    voice = update.message.voice

    if user_id not in user_states:
        user_states[user_id] = {'step': 'waiting_prompt'}

    current_state = user_states[user_id]

    if current_state['step'] != 'waiting_prompt':
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'")
        return

    try:
        status_msg = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await context.bot.get_file(voice.file_id)
        voice_path = os.path.join(VOICE_MESSAGE_DIR, f"voice_{user_id}_{voice.file_id}.ogg")

        await voice_file.download_to_drive(voice_path)

        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=status_msg.message_id,
            text="üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..."
        )

        text = recognize_speech(voice_path)

        if os.path.exists(voice_path):
            os.unlink(voice_path)

        if "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å" in text or "–û—à–∏–±–∫–∞" in text:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=status_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
            )
            return

        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=status_msg.message_id,
            text=f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{text}\"\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
        )

        current_state['prompt'] = text
        current_state['step'] = 'waiting_style'

        await update.message.reply_text("üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**", reply_markup=get_styles_keyboard())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in user_states:
        user_states[user_id] = {'step': 'waiting_prompt'}

    current_state = user_states[user_id]

    if text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        current_state['step'] = 'waiting_prompt'
        await update.message.reply_text(
            "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ö–æ—Ç –Ω–∞ —Ñ–æ–Ω–µ –ª—É–Ω—ã"
        )

    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return

    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return

    elif current_state['step'] == 'waiting_prompt':
        current_state['prompt'] = text
        current_state['step'] = 'waiting_style'

        styles_text = "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**"
        await update.message.reply_text(styles_text, reply_markup=get_styles_keyboard())

    elif current_state['step'] == 'waiting_style':
        style_mapping = {
            "üì∏ –§–æ—Ç–æ": "1",
            "üé® –ê–Ω–∏–º–µ": "2",
            "üñºÔ∏è –ú–∞—Å–ª—è–Ω–∞—è": "3",
            "üåä –ê–∫–≤–∞—Ä–µ–ª—å": "4",
            "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫": "5",
            "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏": "6",
            "‚ö´ –ú–∏–Ω–∏–º–∞–ª–∏–∑–º": "7",
            "üåÖ –ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º": "8",
            "‚úèÔ∏è –≠—Å–∫–∏–∑": "9",
            "üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º": "10",
            "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è": "0"
        }

        if text in style_mapping:
            current_state['style'] = style_mapping[text]
            current_state['step'] = 'generating'

            style_name = text
            await update.message.reply_text(
                f"‚è≥ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n\n"
                f"üìù –ó–∞–ø—Ä–æ—Å: {current_state['prompt']}\n"
                f"üé® –°—Ç–∏–ª—å: {style_name}\n\n"
                f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É...",
                reply_markup=None
            )

            try:
                pipeline_id = api.get_pipeline()

                uuid = api.generate(
                    prompt=current_state['prompt'],
                    pipeline_id=pipeline_id,
                    style=current_state['style']
                )

                message = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...")

                files = api.check_generation(uuid)

                if files:
                    image = api.get_image_from_data(files[0])

                    bio = BytesIO()
                    bio.name = 'image.png'
                    image.save(bio, 'PNG')
                    bio.seek(0)

                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)

                    caption = f"‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\nüìù –ó–∞–ø—Ä–æ—Å: {current_state['prompt']}\nüé® –°—Ç–∏–ª—å: {style_name}"
                    await update.message.reply_photo(photo=bio, caption=caption, reply_markup=get_main_keyboard())

                    user_states[user_id] = {'step': 'waiting_prompt'}

                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                                    reply_markup=get_main_keyboard())
                    user_states[user_id] = {'step': 'waiting_prompt'}

            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", reply_markup=get_main_keyboard())
                user_states[user_id] = {'step': 'waiting_prompt'}

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await cancel(update, context)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                                  reply_markup=get_main_keyboard())


def main():
    if not os.path.exists(VOICE_MESSAGE_DIR):
        os.makedirs(VOICE_MESSAGE_DIR)

    BOT_TOKEN = "8207839620:AAH8sgsnS5XhGnnzVRbjGPhnc_ihAIaXeFk"

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel))

    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
