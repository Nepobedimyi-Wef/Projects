import os
import telebot
import speech_recognition as sr
import librosa
import soundfile as sf
import requests
import base64
import urllib3
import json
import time
import logging
from io import BytesIO
from PIL import Image
from gtts import gTTS
import tempfile
import re

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

bot = telebot.TeleBot("8207839620:AAH8sgsnS5XhGnnzVRbjGPhnc_ihAIaXeFk")

CLIENT_ID = "0199d69e-6286-7bca-8023-233f0896bb58"
CLIENT_SECRET = "64696851-27b0-4755-aab7-0bb089d8e5a8"

KANDINSKY_URL = 'https://api-key.fusionbrain.ai/'
KANDINSKY_API_KEY = '11AEF3776EBCFEB61F0754EE5B79364C'
KANDINSKY_SECRET_KEY = 'AF576A16CA4DEDF0D0D238D4ADF51CB2'

VOICE_MESSAGE_DIR = "temp_voice_messages"


class FusionBrainAPI:
    def __init__(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

        self.FOOD_STYLES = {
            "1": "üì∏ –§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "2": "üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–¥-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
            "3": "üñºÔ∏è –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å",
            "4": "üåä –ê–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π —Å–∫–µ—Ç—á",
            "5": "‚ö´ –ú–∏–Ω–∏–º–∞–ª–∏–∑–º",
            "0": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è"
        }

        self.FOOD_STYLE_PROMPTS = {
            "1": "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
            "2": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–¥-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ, –∫—Ä–∞—Å–∏–≤–∞—è –ø–æ–¥–∞—á–∞, —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
            "3": "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –∂–∏–≤–æ–ø–∏—Å—å, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥",
            "4": "–∞–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π —Å–∫–µ—Ç—á, –ª–µ–≥–∫–∏–π —Ä–∏—Å—É–Ω–æ–∫, –Ω–µ–∂–Ω—ã–µ —Ü–≤–µ—Ç–∞",
            "5": "–º–∏–Ω–∏–º–∞–ª–∏–∑–º, —á–∏—Å—Ç–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω",
            "0": ""
        }

    def get_pipeline(self):
        response = requests.get(self.URL + 'key/api/v1/pipelines', headers=self.AUTH_HEADERS)
        data = response.json()
        return data[0]['id']

    def generate(self, prompt, pipeline_id, images=1, width=1024, height=1024, style="0"):
        style_prompt = self.FOOD_STYLE_PROMPTS.get(style, "")
        full_prompt = f"{prompt}, {style_prompt}" if style_prompt else prompt

        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": full_prompt
            }
        }

        data = {
            'pipeline_id': (None, pipeline_id),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/pipeline/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        return data['uuid']

    def check_generation(self, request_id, attempts=20, delay=10):
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/pipeline/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if data['status'] == 'DONE':
                return data['result']['files']
            elif data['status'] == 'FAIL':
                raise Exception("Generation failed")

            attempts -= 1
            time.sleep(delay)

        raise Exception("Timeout waiting for generation")

    def get_image_from_data(self, image_data):
        if isinstance(image_data, list):
            image_data = image_data[0]

        image_bytes = base64.b64decode(image_data)
        return Image.open(BytesIO(image_bytes))


kandinsky_api = FusionBrainAPI(KANDINSKY_URL, KANDINSKY_API_KEY, KANDINSKY_SECRET_KEY)


def get_access_token():
    auth_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

    credentials = f"{CLIENT_ID}:{CLIENT_SECRET}"
    encoded_credentials = base64.b64encode(credentials.encode()).decode()

    auth_headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'Authorization': f'Basic {encoded_credentials}',
        'RqUID': '6f0b1291-c7f3-43c6-bb2e-9f3efc2e4568'
    }

    auth_data = {'scope': 'GIGACHAT_API_PERS'}

    print("üîê –ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...")
    auth_response = requests.post(auth_url, headers=auth_headers, data=auth_data, verify=False)

    if auth_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}")
        return None

    access_token = auth_response.json()['access_token']
    print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
    return access_token


def get_gigachat_response(message):

    recipe_prompt = f"""–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞: {message}. 

–í–∫–ª—é—á–∏:
1. –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
2. –ü–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
3. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
4. –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–∞—á–µ

–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–ª—é–¥–æ, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ —Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞—Ö.

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –∏ —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π."""

    access_token = get_access_token()
    if not access_token:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–µ—Ü–µ–ø—Ç–æ–≤."

    chat_url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

    chat_headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }

    chat_data = {
        "model": "GigaChat",
        "messages": [
            {
                "role": "user",
                "content": recipe_prompt
            }
        ],
        "temperature": 0.7,
        "max_tokens": 2000
    }

    chat_response = requests.post(chat_url, headers=chat_headers, json=chat_data, verify=False)

    if chat_response.status_code == 200:
        response_text = chat_response.json()['choices'][0]['message']['content']
        print(f"ü§ñ –û—Ç–≤–µ—Ç GigaChat –ø–æ–ª—É—á–µ–Ω")
        return response_text
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {chat_response.status_code}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def generate_food_image_kandinsky(dish_name, recipe_description, style="2"):
    try:
        image_prompt = f"""
        –ê–ø–ø–µ—Ç–∏—Ç–Ω–æ–µ –±–ª—é–¥–æ: {dish_name}. 
        –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ—É–¥-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, 
        –∫—Ä–∞—Å–∏–≤–∞—è –ø–æ–¥–∞—á–∞, —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ.
        –ï–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Å–≤–µ–∂–µ–π –∏ –≤–∫—É—Å–Ω–æ–π.
        """

        print("üé® –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kandinsky...")

        pipeline_id = kandinsky_api.get_pipeline()

        uuid = kandinsky_api.generate(
            prompt=image_prompt,
            pipeline_id=pipeline_id,
            style=style,
            width=1024,
            height=1024
        )

        print(f"üîÑ ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {uuid}")

        files = kandinsky_api.check_generation(uuid, attempts=15, delay=10)

        if files:
            image = kandinsky_api.get_image_from_data(files[0])

            bio = BytesIO()
            bio.name = 'food_image.png'
            image.save(bio, 'PNG')
            bio.seek(0)

            print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return bio

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


def convert_ogg_to_wav(ogg_path, wav_path):
    try:
        audio, sr_rate = librosa.load(ogg_path, sr=16000)
        sf.write(wav_path, audio, sr_rate, format='WAV')
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False


def recognize_speech(audio_path):
    recognizer = sr.Recognizer()

    try:
        wav_path = audio_path.replace('.ogg', '.wav')

        if not convert_ogg_to_wav(audio_path, wav_path):
            return "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ"

        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")

        if os.path.exists(wav_path):
            os.unlink(wav_path)

        return text

    except sr.UnknownValueError:
        if os.path.exists(wav_path):
            os.unlink(wav_path)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except Exception as e:
        if os.path.exists(wav_path):
            os.unlink(wav_path)
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"


def clean_text_for_speech(text):
    text = re.sub(r'[^\w\s\.\,\!\?\-\:\;\(\)\"\']', '', text)

    text = re.sub(r'\.{2,}', '.', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –Ω–∞ –æ–¥–Ω—É —Ç–æ—á–∫—É
    text = re.sub(r'\!{2,}', '!', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
    text = re.sub(r'\?{2,}', '?', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏

    text = re.sub(r'[\*\#\@\$\&\+\=\[\]\<\>]', '', text)

    text = re.sub(r'<[^>]+>', '', text)  # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # –£–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **
    text = re.sub(r'\*(.*?)\*', r'\1', text)  # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å–∏–≤ *
    text = re.sub(r'_(.*?)_', r'\1', text)  # –£–¥–∞–ª—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ _

    text = re.sub(r'\s+', ' ', text).strip()

    return text


def text_to_speech(text, filename):
    try:
        cleaned_text = clean_text_for_speech(text)

        if len(cleaned_text) > 3000:
            cleaned_text = cleaned_text[:3000] + " –¢–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è –æ–∑–≤—É—á–∫–∏."

        print(f"üîä –û–∑–≤—É—á–∏–≤–∞—é —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        tts = gTTS(text=cleaned_text, lang='ru', slow=False)
        tts.save(filename)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å: {e}")
        return False


@bot.message_handler(commands=['start'])
def start_handler(message):
    welcome_text = """
üç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—à–µ—Ñ! üç≤

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –≤–∫—É—Å–Ω—ã—Ö –±–ª—é–¥ –∏ –ø–æ–∫–∞–∂—É, –∫–∞–∫ –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∏ —è:
1. üçΩÔ∏è –ü—Ä–∏—à–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
2. üîä –û–∑–≤—É—á—É —Ä–µ—Ü–µ–ø—Ç –≥–æ–ª–æ—Å–æ–º
3. üé® –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞!

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "—Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â–∞"
‚Ä¢ "–∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞" 
‚Ä¢ "–¥–µ—Å–µ—Ä—Ç —Ç–∏—Ä–∞–º–∏—Å—É"

‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 1-2 –º–∏–Ω—É—Ç
    """
    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(commands=['help'])
def help_handler(message):
    help_text = """
üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞
3. –Ø –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç, –æ–∑–≤—É—á—É –µ–≥–æ –∏ —Å–æ–∑–¥–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞!

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "—Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"
‚Ä¢ "–∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–æ–≤"
‚Ä¢ "–±–ª–∏–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫"

‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É
    """
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(content_types=['text'])
def text_message_handler(message):
    user_message = message.text.strip()

    if not user_message:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞!")
        return

    status_msg = bot.send_message(
        message.chat.id,
        "üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –≤–∞—Å..."
    )

    try:
        recipe = get_gigachat_response(user_message)

        if "–∏–∑–≤–∏–Ω–∏—Ç–µ" in recipe.lower() or "–æ—à–∏–±–∫–∞" in recipe.lower():
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=recipe
            )
            return

        if len(recipe) > 4000:
            parts = [recipe[i:i + 4000] for i in range(0, len(recipe), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=status_msg.message_id,
                        text=part
                    )
                else:
                    bot.send_message(message.chat.id, part)
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=recipe
            )

        voice_msg = bot.send_message(
            message.chat.id,
            "üîä –û–∑–≤—É—á–∏–≤–∞—é —Ä–µ—Ü–µ–ø—Ç..."
        )

        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_audio:
            temp_filename = temp_audio.name

        if text_to_speech(recipe, temp_filename):
            with open(temp_filename, 'rb') as audio_file:
                bot.send_voice(
                    message.chat.id,
                    audio_file,
                    caption=f"üîä –û–∑–≤—É—á–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: {user_message}",
                    reply_to_message_id=message.message_id
                )
            bot.delete_message(message.chat.id, voice_msg.message_id)
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=voice_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, –Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤! üìù"
            )

        if os.path.exists(temp_filename):
            os.unlink(temp_filename)

        generating_msg = bot.send_message(
            message.chat.id,
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞... –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã ‚è≥"
        )

        image_bytes = generate_food_image_kandinsky(user_message, recipe)

        if image_bytes:
            bot.send_photo(
                message.chat.id,
                image_bytes,
                caption=f"üçΩÔ∏è –í–æ—Ç –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –±–ª—é–¥–æ(–Ω–µ –≤—Å–µ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç): {user_message}"
            )
            bot.delete_message(message.chat.id, generating_msg.message_id)
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=generating_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞, –Ω–æ —Ä–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤! üç≥"
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@bot.message_handler(content_types=['voice'])
def voice_message_handler(message):
    voice = message.voice
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    try:
        status_msg = bot.send_message(
            message.chat.id,
            "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )

        voice_file_info = bot.get_file(voice.file_id)
        voice_file = bot.download_file(voice_file_info.file_path)

        temp_file_path = os.path.join(VOICE_MESSAGE_DIR, f"voice_{message.message_id}.ogg")

        with open(temp_file_path, 'wb') as f:
            f.write(voice_file)

        print(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(temp_file_path)}")

        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text="üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..."
        )

        recognized_text = recognize_speech(temp_file_path)

        os.unlink(temp_file_path)

        if recognized_text.lower() in ["–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å",
                                       "–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ"] or recognized_text.startswith("–û—à–∏–±–∫–∞:"):
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
            )
            return

        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text=f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{recognized_text}'\n\n–ò—â—É —Ä–µ—Ü–µ–ø—Ç..."
        )

        recipe = get_gigachat_response(recognized_text)

        if "–∏–∑–≤–∏–Ω–∏—Ç–µ" in recipe.lower() or "–æ—à–∏–±–∫–∞" in recipe.lower():
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=recipe
            )
            return

        if len(recipe) > 4000:
            parts = [recipe[i:i + 4000] for i in range(0, len(recipe), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=status_msg.message_id,
                        text=part
                    )
                else:
                    bot.send_message(message.chat.id, part)
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=recipe
            )

        voice_msg = bot.send_message(
            message.chat.id,
            "üîä –û–∑–≤—É—á–∏–≤–∞—é —Ä–µ—Ü–µ–ø—Ç..."
        )

        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_audio:
            temp_filename = temp_audio.name

        if text_to_speech(recipe, temp_filename):
            with open(temp_filename, 'rb') as audio_file:
                bot.send_voice(
                    message.chat.id,
                    audio_file,
                    caption=f"üîä –û–∑–≤—É—á–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: {recognized_text}",
                    reply_to_message_id=message.message_id
                )
            bot.delete_message(message.chat.id, voice_msg.message_id)
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=voice_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, –Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤! üìù"
            )

        if os.path.exists(temp_filename):
            os.unlink(temp_filename)

        generating_msg = bot.send_message(
            message.chat.id,
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞... –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã ‚è≥"
        )

        image_bytes = generate_food_image_kandinsky(recognized_text, recipe)

        if image_bytes:
            bot.send_photo(
                message.chat.id,
                image_bytes,
                caption=f"üçΩÔ∏è –í–æ—Ç –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –±–ª—é–¥–æ: {recognized_text}"
            )
            bot.delete_message(message.chat.id, generating_msg.message_id)
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=generating_msg.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞, –Ω–æ —Ä–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤! üç≥"
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
        )


def main():
    if not os.path.exists(VOICE_MESSAGE_DIR):
        os.makedirs(VOICE_MESSAGE_DIR)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {VOICE_MESSAGE_DIR}")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)


if __name__ == '__main__':
    main()
