import json
import time
import base64
import logging
from io import BytesIO
from PIL import Image
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


class FusionBrainAPI:
    def __init__(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

        self.STYLES = {
            "1": "üì∏ –§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "2": "üé® –ê–Ω–∏–º–µ",
            "3": "üñºÔ∏è –ú–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å",
            "4": "üåä –ê–∫–≤–∞—Ä–µ–ª—å",
            "5": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
            "6": "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
            "7": "‚ö´ –ú–∏–Ω–∏–º–∞–ª–∏–∑–º",
            "8": "üåÖ –ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º",
            "9": "‚úèÔ∏è –≠—Å–∫–∏–∑",
            "10": "üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º",
            "0": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è"
        }

        self.STYLE_PROMPTS = {
            "1": "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
            "2": "–≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ, —è–ø–æ–Ω—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞",
            "3": "–º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, –º–∞–∑–∫–∏ –∫–∏—Å—Ç–∏",
            "4": "–∞–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫, –≤–æ–¥—è–Ω—ã–µ –∫—Ä–∞—Å–∫–∏, –ª–µ–≥–∫–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è",
            "5": "–∫–∏–±–µ—Ä–ø–∞–Ω–∫, –Ω–µ–æ–Ω, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ",
            "6": "—Ñ—ç–Ω—Ç–µ–∑–∏, –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –º–∞–≥–∏—è, —ç–ø–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å",
            "7": "–º–∏–Ω–∏–º–∞–ª–∏–∑–º, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã, —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏, –ª–∞–∫–æ–Ω–∏—á–Ω–æ",
            "8": "–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º, —Å–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –º—è–≥–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã",
            "9": "—ç—Å–∫–∏–∑, –Ω–∞–±—Ä–æ—Å–æ–∫ –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º, —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ä–∏—Å—É–Ω–æ–∫",
            "10": "—Å—é—Ä—Ä–µ–∞–ª–∏–∑–º, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ, –Ω–µ—Ä–µ–∞–ª—å–Ω–æ, —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–µ",
            "0": ""
        }

    def get_pipeline(self):
        response = requests.get(self.URL + 'key/api/v1/pipelines', headers=self.AUTH_HEADERS)
        data = response.json()
        return data[0]['id']

    def generate(self, prompt, pipeline_id, images=1, width=1024, height=1024, style="0"):
        style_prompt = self.STYLE_PROMPTS.get(style, "")
        full_prompt = f"{prompt}, {style_prompt}" if style_prompt else prompt

        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": full_prompt
            }
        }

        data = {
            'pipeline_id': (None, pipeline_id),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/pipeline/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        return data['uuid']

    def check_generation(self, request_id, attempts=20, delay=10):
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/pipeline/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if data['status'] == 'DONE':
                return data['result']['files']
            elif data['status'] == 'FAIL':
                raise Exception("Generation failed")

            attempts -= 1
            time.sleep(delay)

        raise Exception("Timeout waiting for generation")

    def get_image_from_data(self, image_data):
        if isinstance(image_data, list):
            image_data = image_data[0]

        image_bytes = base64.b64decode(image_data)
        return Image.open(BytesIO(image_bytes))


API_URL = 'https://api-key.fusionbrain.ai/'
API_KEY = '497FC239DD6DE62B5CA88473EB340B4A'
SECRET_KEY = 'A35BEA9989D8922F6ED9B7C68DF05A3E'

api = FusionBrainAPI(API_URL, API_KEY, SECRET_KEY)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {'step': 'waiting_prompt'}

    welcome_text = """
üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Image Generator!

–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
3. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É)

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –ö–æ—Ç –Ω–∞ —Ñ–æ–Ω–µ –ª—É–Ω—ã
‚Ä¢ –ó–∞–∫–∞—Ç –≤ –ª–µ—Å—É
‚Ä¢ –ì–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ 

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å! üñºÔ∏è
    """

    await update.message.reply_text(welcome_text)


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

**–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å (–æ—Ç 0 –¥–æ 10)
3. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã ‚è≥
    """
    await update.message.reply_text(help_text)


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_states:
        user_states[user_id] = {'step': 'waiting_prompt'}
    await update.message.reply_text("‚úÖ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if user_id not in user_states:
        user_states[user_id] = {'step': 'waiting_prompt'}

    current_state = user_states[user_id]

    if current_state['step'] == 'waiting_prompt':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å
        current_state['prompt'] = text
        current_state['step'] = 'waiting_style'

        styles_text = "üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n"
        for key, name in api.STYLES.items():
            styles_text += f"{key}. {name}\n"

        styles_text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∏–ª—è (0-10):"

        await update.message.reply_text(styles_text)

    elif current_state['step'] == 'waiting_style':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
        if text in api.STYLES:
            current_state['style'] = text
            current_state['step'] = 'generating'

            await update.message.reply_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é... –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –º–∏–Ω—É—Ç—É.")

            try:
                # –ü–æ–ª—É—á–∞–µ–º pipeline ID
                pipeline_id = api.get_pipeline()

                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                uuid = api.generate(
                    prompt=current_state['prompt'],
                    pipeline_id=pipeline_id,
                    style=current_state['style']
                )

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                message = await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...")

                files = api.check_generation(uuid)

                if files:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image = api.get_image_from_data(files[0])

                    bio = BytesIO()
                    bio.name = 'image.png'
                    image.save(bio, 'PNG')
                    bio.seek(0)

                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)
                    await update.message.reply_photo(photo=bio, caption="‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    user_states[user_id] = {'step': 'waiting_prompt'}
                    await update.message.reply_text("–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å! ‚ú®")

                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    user_states[user_id] = {'step': 'waiting_prompt'}

            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
                user_states[user_id] = {'step': 'waiting_prompt'}

        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∏–ª—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def main():
    BOT_TOKEN = "8150733026:AAHuJr3-AW1BH-wQ8p3xiEjIykfBRWJI5fM"

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.add_error_handler(error_handler)

    application.run_polling()


if __name__ == '__main__':
    main()
